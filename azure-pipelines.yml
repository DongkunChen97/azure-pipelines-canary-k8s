# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: canary-rollback
  - name: stableVersion
    value: $[variables.stable_version]
  - name: imageName
    value: dongkun-canary-test
  - name: dockerRegistryServiceConnection
    value: sharedServiceConnection
  - name: imageRepository
    value: 'dongkun-canary-test'
  - name: containerRegistry
    value: sharedglobalservices.azurecr.io
  - name: tag
    value: '$(Build.BuildId)'
  - name: secretname
    value: "mysecret"
  - name: azureSubscriptionEndpoint
    value: PromoteIQ-Playground (b558a354-8f0b-4461-8876-9d1e8b56360f)
  - name: azureResourceGroup
    value: dev-grf-del-iad-rg
  - name: kubernetesCluster
    value: dev-grf-del-iad-aks
  - name: partitionPercentageInDeploy
    value: 10
  - name: partitionPercentageFirstPromote
    value: 20
  - name: partitionPercentageSecondPromote
    value: 50
  - name: partitionPercentageThirdPromote
    value: 80
  - name: partitionPercentageFinalPromote
    value: 100

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: BuildJob
      displayName: Build
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: Docker@2
          displayName: Build and push image
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageName)
            command: buildAndPush
            Dockerfile: app/Dockerfile
            tags: |
              $(tag)

        - task: HelmInstaller@0
          displayName: install helm
          inputs:
            helmVersion: "v3.7.1"
            installKubectl: false
            checkLatestHelmVersion: false

        - task: AzureKeyVault@2
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            KeyVaultName: dev-grf-iad-core
            SecretsFilter: acrUsername,acrPassword,launchdarklySdkKey
            RunAsPreJob: true

        - task: AzureCLI@2
          env:
            HELM_EXPERIMENTAL_OCI: 1
          inputs:
            azureSubscription: "hydraSharedGlobalServicesHelmPull"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript:
              helm registry login sharedglobalservices.azurecr.io --username $(acrUsername) --password $(acrPassword)
              helm package $(System.DefaultWorkingDirectory)/helm/app
              helm push sample-app-0.0.1.tgz oci://sharedglobalservices.azurecr.io/delivery/helm
          displayName: build and push helm chart

        - upload: manifests
          artifact: manifests

        - upload: misc
          artifact: misc

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az aks get-credentials -g $(azureResourceGroup) -n $(kubernetesCluster) --admin
              describe=`kubectl get statefulset sampleapp -n dongkun -o jsonpath="{ .spec.replicas }"`
              echo "##vso[task.setvariable variable=podsNumber;isoutput=true]$describe"
          displayName: get pods number
          name: GetPodsNum

        - script: |
            echo $(stableVersion)

        - task: AzureCLI@2
          displayName: test record the new version
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              export AZURE_DEVOPS_EXT_PAT='mypat'
              az devops login --organization https://dev.azure.com/PromoteIQ/
              az pipelines variable-group variable update --group-id 106 --name stable_version --value 999 --org https://dev.azure.com/PromoteIQ/ --project Delivery-Hydra


- stage: DeployFirst
  displayName: Deploy first
  dependsOn: Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageInDeploy)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: promote1
  displayName: promote stage
  dependsOn:
    - DeployFirst
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageFirstPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: promote2
  displayName: second promote stage
  dependsOn:
    - promote1
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageSecondPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: promote3
  displayName: third promote stage
  dependsOn:
    - promote2
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageThirdPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: finalPromote
  displayName: final promote
  dependsOn:
    - promote3
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageFinalPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: failhandling
  displayName: handle failure
  dependsOn:
    - Build
    - DeployFirst
    - promote1
    - promote2
    - promote3
    - finalPromote
  condition: or(failed(), canceled())
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - job: failEcho
      displayName: echo when error
      steps:
        - bash: |
            echo wow,there are something bad happened
            echo $(stableVersion)
          displayName: get version we should roll back to

    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: 100
        buildId: $(stableVersion)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: recordNewVersion
  displayName: record new stable version
  dependsOn: finalPromote
  jobs:
    - job: calculateNewVersion
      displayName: calculate and set
      steps:
        - task: AzureCLI@2
          displayName: record the new version
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az pipelines variable-group variable update --group-id 106 --name stable_version --value $(tag) --org https://dev.azure.com/PromoteIQ/ --project Delivery-Hydra
