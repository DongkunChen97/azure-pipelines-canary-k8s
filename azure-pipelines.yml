# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  imageName: dongkun-canary-test
  dockerRegistryServiceConnection: sharedServiceConnection
  imageRepository: 'dongkun-canary-test'
  containerRegistry: sharedglobalservices.azurecr.io
  tag: '$(Build.BuildId)'
  secretname: "mysecret"
  azureSubscriptionEndpoint: PromoteIQ-Playground (b558a354-8f0b-4461-8876-9d1e8b56360f)
  azureResourceGroup: dev-grf-del-iad-rg
  kubernetesCluster: dev-grf-del-iad-aks
  partitionPercentageInDeploy: 10
  partitionPercentageFirstPromote: 20
  partitionPercentageSecondPromote: 50
  partitionPercentageThirdPromote: 80
  partitionPercentageFinalPromote: 100

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: BuildJob
      displayName: Build
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: Docker@2
          displayName: Build and push image
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageName)
            command: buildAndPush
            Dockerfile: app/Dockerfile
            tags: |
              $(tag)

        - task: HelmInstaller@0
          displayName: install helm
          inputs:
            helmVersion: "v3.7.1"
            installKubectl: false
            checkLatestHelmVersion: false

        - task: AzureKeyVault@2
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            KeyVaultName: dev-grf-iad-core
            SecretsFilter: acrUsername,acrPassword,launchdarklySdkKey
            RunAsPreJob: true

        - task: AzureCLI@2
          env:
            HELM_EXPERIMENTAL_OCI: 1
          inputs:
            azureSubscription: "hydraSharedGlobalServicesHelmPull"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript:
              helm registry login sharedglobalservices.azurecr.io --username $(acrUsername) --password $(acrPassword)
              helm package $(System.DefaultWorkingDirectory)/helm/app
              helm push sample-app-0.0.1.tgz oci://sharedglobalservices.azurecr.io/delivery/helm
          displayName: build and push helm chart

        - upload: manifests
          artifact: manifests

        - upload: misc
          artifact: misc

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az aks get-credentials -g $(azureResourceGroup) -n $(kubernetesCluster) --admin
              describe=`kubectl get statefulset sampleapp -n dongkun -o jsonpath="{ .spec.replicas }"`
              echo "##vso[task.setvariable variable=podsNumber;isoutput=true]$describe"
          displayName: get pods number
          name: GetPodsNum

- stage: DeployFirst
  displayName: Deploy first
  dependsOn: Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageInDeploy)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: promote1
  displayName: promote stage
  dependsOn:
    - DeployFirst
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageFirstPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: promote2
  displayName: second promote stage
  dependsOn:
    - promote1
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageSecondPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: promote3
  displayName: third promote stage
  dependsOn:
    - promote2
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageThirdPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)

- stage: finalPromote
  displayName: final promote
  dependsOn:
    - promote3
    - Build
  condition: succeeded()
  variables:
    podnumber: $[stageDependencies.Build.BuildJob.outputs['GetPodsNum.podsNumber']]

  jobs:
    - template: templates/helm-deploy.yml
      parameters:
        partitionValue: $(partitionPercentageFinalPromote)
        buildId: $(tag)
        secretName: $(secretname)
        podNumber: $(podnumber)