# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  imageName: dongkun-canary-test
  dockerRegistryServiceConnection: sharedServiceConnection
  imageRepository: 'dongkun-canary-test'
  containerRegistry: sharedglobalservices.azurecr.io
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: Docker@2
          displayName: Build and push image
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageName)
            command: buildAndPush
            Dockerfile: app/Dockerfile
            tags: |
              $(tag)

        - task: HelmInstaller@0
          displayName: install helm
          inputs:
            helmVersion: "v3.7.1"
            installKubectl: false
            checkLatestHelmVersion: false

        - script: |
            export HELM_EXPERIMENTAL_OCI=1
            helm registry login sharedglobalservices.azurecr.io --username SharedGlobalServices --password ISkbz+F/5+s6eTfFagmVVHA2Wm03Zv0q
            helm package $(System.DefaultWorkingDirectory)/helm/app
            helm push sample-app-0.0.1.tgz oci://sharedglobalservices.azurecr.io/delivery/helm
          displayName: build helm chart

        - upload: manifests
          artifact: manifests

        - upload: misc
          artifact: misc

- stage: DeployFirst
  displayName: Deploy first
  dependsOn: Build
  condition: succeeded()

  jobs:
    - deployment: helmDeploy
      displayName: deploy app by helm
      environment: "dongkun-canarytest.dongkun"

      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  export HELM_EXPERIMENTAL_OCI=1
                  helm registry login sharedglobalservices.azurecr.io --username SharedGlobalServices --password ISkbz+F/5+s6eTfFagmVVHA2Wm03Zv0q
                  helm pull oci://sharedglobalservices.azurecr.io/delivery/helm/sample-app --version 0.0.1
                displayName: pull helm chart

              - task: HelmDeploy@0
                displayName: do deploy
                inputs:
                  connectionType: "Azure Resource Manager"
                  azureSubscription: PromoteIQ-Playground (b558a354-8f0b-4461-8876-9d1e8b56360f)
                  azureResourceGroup: dev-grf-del-iad-rg
                  kubernetesCluster: dev-grf-del-iad-aks
                  namespace: dongkun
                  command: upgrade
                  chartType: filepath
                  chartPath: $(System.DefaultWorkingDirectory)/sample-app-0.0.1.tgz
                  releaseName: rls-sample-app
                  install: true
                  arguments: >
                    - cleanup-on-fail



#  jobs:
#    - deployment: Deploycanary
#      displayName: Deploy canary
#      pool:
#        vmImage: ubuntu-latest
#      environment: 'dongkun-canarytest.dongkun'
#      strategy:
#        runOnce:
#          deploy:
#            steps:
#              - task: KubernetesManifest@0
#                displayName: Create imagePullSecret
#                inputs:
#                  action: createSecret
#                  secretName: azure-pipelines-canary-k8s
#                  dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
#
#              - task: KubernetesManifest@0
#                displayName: Deploy to Kubernetes cluster
#                env:
#                  PARTITION_VALUE: 4
#                inputs:
#                  action: 'deploy'
##                  strategy: "canary"
##                  percentage: "25"
#                  manifests: |
#                    $(Pipeline.Workspace)/manifests/*
#                  containers: '$(containerRegistry)/$(imageRepository):$(tag)'
#                  imagePullSecrets: azure-pipelines-canary-k8s
#
#              - task: KubernetesManifest@0
#                displayName: Deploy Forbio and Service Monitor
#                inputs:
#                  action: 'deploy'
#                  manifests: |
#                    $(Pipeline.Workspace)/misc/*
#



- stage:
  displayName: promote stage
  dependsOn: DeployFirst
  condition: succeeded()

  jobs:
    - deployment: promote
      displayName: promote deploy
      pool:
        vmImage: ubuntu-latest
      environment: 'dongkun-canarytest.dongkun'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: KubernetesManifest@0
                displayName: promote partition rolling update
                env:
                  PARTITION_VALUE: 2
                inputs:
                  action: 'deploy'
                  manifests: $(Pipeline.Workspace)/manifests/deployment.yml
                  containers: '$(containerRegistry)/$(imageRepository):$(tag)'
                  imagePullSecrets: azure-pipelines-canary-k8s
#
#- stage: PromoteRejectCanary
#  displayName: Promote or Reject canary
#  dependsOn: DeployCanary
#  condition: succeeded()
#
#  jobs:
#  - deployment: PromoteCanary
#    displayName: Promote Canary
#    pool:
#      vmImage: ubuntu-latest
#    environment: 'dongkun-canarytest.dongkun'
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - task: KubernetesManifest@0
#            displayName: promote canary
#            inputs:
#              action: 'promote'
#              strategy: 'canary'
#              manifests: '$(Pipeline.Workspace)/manifests/*'
#              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
#              imagePullSecrets: '$(imagePullSecret)'
#
#- stage: RejectCanary
#  displayName: Reject canary
#  dependsOn: PromoteRejectCanary
#  condition: failed()
#
#  jobs:
#  - deployment: RejectCanary
#    displayName: Reject Canary
#    pool:
#      vmImage: ubuntu-latest
#    environment: 'dongkun-canarytest.dongkun'
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - task: KubernetesManifest@0
#            displayName: reject canary
#            inputs:
#              action: 'reject'
#              strategy: 'canary'
#              manifests: '$(Pipeline.Workspace)/manifests/*'